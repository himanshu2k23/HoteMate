package com.hotelmate.servlets;

//ProcessPaymentServlet.java
import com.razorpay.*;
import org.json.JSONObject; // Make sure you have json-20231013.jar or similar version
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

@WebServlet("/process-payment-servlet")
public class ProcessPaymentServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final String KEY_ID = "rzp_test_PMlngtSwomnp5L";
    private static final String KEY_SECRET = "BQVD0jeBm8yjlFMbwV8X5r2d";

    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        response.setContentType("application/json");
        PrintWriter out = response.getWriter();
        
        try {
            // Get and validate the total amount
            String totalAmountStr = request.getParameter("totalAmount");
            System.out.println("Received amount: " + totalAmountStr); // Debug log
            
            if (totalAmountStr == null || totalAmountStr.trim().isEmpty()) {
                throw new ServletException("Total amount is required");
            }
            
            // Parse the amount
            double totalAmount = Double.parseDouble(totalAmountStr.trim());
            System.out.println("Parsed amount: " + totalAmount); // Debug log
            
            // Convert to paise
            int amountInPaise = (int)(totalAmount * 100);
            System.out.println("Amount in paise: " + amountInPaise); // Debug log
            
            // Initialize RazorPay client
            RazorpayClient razorpay = new RazorpayClient(KEY_ID, KEY_SECRET);
            
            // Create order request
            JSONObject orderRequest = new JSONObject();
            orderRequest.put("amount", Integer.valueOf(amountInPaise));
            orderRequest.put("currency", "INR");
            orderRequest.put("receipt", "order_" + System.currentTimeMillis());
            
            System.out.println("Creating order with request: " + orderRequest.toString()); // Debug log 
            //WORKS TILL HERE
            Order order = razorpay.orders.create(orderRequest);
            System.out.println("Order created: " + order.toString()); // Debug log
            
            // Create response
            JSONObject responseData = new JSONObject();
            responseData.put("orderId", String.valueOf(order.get("id")));
            responseData.put("amount", Integer.valueOf(amountInPaise));
            responseData.put("currency", "INR");
            responseData.put("keyId", String.valueOf(KEY_ID));
            
            out.print(responseData.toString());
            out.flush();
            
        } catch (RazorpayException e) {
            System.err.println("RazorPay Error: " + e.getMessage()); // Error log
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            JSONObject errorResponse = new JSONObject();
            errorResponse.put("error", "RazorPay Error: " + e.getMessage());
            out.print(errorResponse.toString());
        } catch (Exception e) {
            System.err.println("General Error: " + e.getMessage()); // Error log
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            JSONObject errorResponse = new JSONObject();
            errorResponse.put("error", "Server Error: " + e.getMessage());
            out.print(errorResponse.toString());
        }
    }
}