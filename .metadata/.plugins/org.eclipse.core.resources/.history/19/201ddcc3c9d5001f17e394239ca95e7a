package com.hotelmate.admin.servlets;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@WebServlet("/admin/hotels")
public class HotelManagementServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static final String JDBC_URL = "jdbc:mysql://localhost:3306/HotelMate?useSSL=false";
	private static final String DB_USER = "root";
	private static final String DB_PASSWORD = "password";

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD)) {
			String action = request.getParameter("action");

			if ("edit".equals(action)) {
				int hotelId = Integer.parseInt(request.getParameter("id"));
				Map<String, Object> hotel = getHotelById(connection, hotelId);
				request.setAttribute("hotel", hotel);
				request.getRequestDispatcher("/WEB-INF/admin/editHotel.jsp").forward(request, response);
			} else {
				List<Map<String, Object>> hotels = getAllHotels(connection);
				request.setAttribute("hotels", hotels);
				request.getRequestDispatcher("/WEB-INF/admin/hotels.jsp").forward(request, response);
			}
		} catch (Exception e) {
			e.printStackTrace();
			response.sendRedirect("/HotelMate/admin/hotels?errorMsg=Error retrieving hotels.");
		}
	}

	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String action = request.getParameter("action");
		String redirectUrl = "/HotelMate/admin/hotels";

		try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD)) {
			switch (action.toLowerCase()) {
			case "delete":
				int hotelId = Integer.parseInt(request.getParameter("id"));
				deleteHotel(connection, hotelId);
				response.sendRedirect(redirectUrl + "?successMsg=Hotel deleted successfully.");
				break;

			case "update":
				updateHotel(connection, request);
				response.sendRedirect(redirectUrl + "?successMsg=Hotel updated successfully.");
				break;

			case "create":
				createHotel(connection, request);
				response.sendRedirect(redirectUrl + "?successMsg=Hotel created successfully.");
				break;

			default:
				response.sendRedirect(redirectUrl + "?errorMsg=Invalid action specified.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			response.sendRedirect(redirectUrl + "?errorMsg=Error processing request.");
		}
	}

	private List<Map<String, Object>> getAllHotels(Connection connection) throws SQLException {
		List<Map<String, Object>> hotels = new ArrayList<>();
		String query = "SELECT * FROM hotels ORDER BY created_at DESC";

		try (PreparedStatement statement = connection.prepareStatement(query);
				ResultSet resultSet = statement.executeQuery()) {

			while (resultSet.next()) {
				Map<String, Object> hotel = new HashMap<>();
				hotel.put("hotel_id", resultSet.getInt("hotel_id"));
				hotel.put("name", resultSet.getString("name"));
				hotel.put("description", resultSet.getString("description"));
				hotel.put("location", resultSet.getString("location"));
				hotel.put("city", resultSet.getString("city"));
				hotel.put("state", resultSet.getString("state"));
				hotel.put("country", resultSet.getString("country"));
				hotel.put("zip_code", resultSet.getString("zip_code"));
				hotel.put("price_per_night", resultSet.getBigDecimal("price_per_night"));
				hotel.put("rating", resultSet.getFloat("rating"));
				hotel.put("amenities", resultSet.getString("amenities"));
				hotel.put("contact_email", resultSet.getString("contact_email"));
				hotel.put("contact_phone", resultSet.getString("contact_phone"));
				hotel.put("images", resultSet.getString("images"));
				hotel.put("available_rooms", resultSet.getInt("available_rooms"));
				hotel.put("created_at", resultSet.getTimestamp("created_at"));
				hotel.put("updated_at", resultSet.getTimestamp("updated_at"));
				hotels.add(hotel);
			}
		}
		return hotels;
	}

	private Map<String, Object> getHotelById(Connection connection, int hotelId) throws SQLException {
		String query = "SELECT * FROM hotels WHERE hotel_id = ?";
		Map<String, Object> hotel = new HashMap<>();

		try (PreparedStatement statement = connection.prepareStatement(query)) {
			statement.setInt(1, hotelId);
			try (ResultSet resultSet = statement.executeQuery()) {
				if (resultSet.next()) {
					hotel.put("hotel_id", resultSet.getInt("hotel_id"));
					hotel.put("name", resultSet.getString("name"));
					hotel.put("description", resultSet.getString("description"));
					hotel.put("location", resultSet.getString("location"));
					hotel.put("city", resultSet.getString("city"));
					hotel.put("state", resultSet.getString("state"));
					hotel.put("country", resultSet.getString("country"));
					hotel.put("zip_code", resultSet.getString("zip_code"));
					hotel.put("price_per_night", resultSet.getBigDecimal("price_per_night"));
					hotel.put("rating", resultSet.getFloat("rating"));
					hotel.put("amenities", resultSet.getString("amenities"));
					hotel.put("contact_email", resultSet.getString("contact_email"));
					hotel.put("contact_phone", resultSet.getString("contact_phone"));
					hotel.put("images", resultSet.getString("images"));
					hotel.put("available_rooms", resultSet.getInt("available_rooms"));
				}
			}
		}
		return hotel;
	}

	private void createHotel(Connection connection, HttpServletRequest request) throws SQLException {
		String query = "INSERT INTO hotels (name, description, location, city, state, country, "
				+ "zip_code, price_per_night, rating, amenities, contact_email, contact_phone, "
				+ "images, available_rooms, created_at, updated_at) "
				+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())";

		try (PreparedStatement statement = connection.prepareStatement(query)) {
			statement.setString(1, request.getParameter("name"));
			statement.setString(2, request.getParameter("description"));
			statement.setString(3, request.getParameter("location"));
			statement.setString(4, request.getParameter("city"));
			statement.setString(5, request.getParameter("state"));
			statement.setString(6, request.getParameter("country"));
			statement.setString(7, request.getParameter("zip_code"));
			statement.setBigDecimal(8, new java.math.BigDecimal(request.getParameter("price_per_night")));
			statement.setFloat(9, Float.parseFloat(request.getParameter("rating")));
			statement.setString(10, request.getParameter("amenities"));
			statement.setString(11, request.getParameter("contact_email"));
			statement.setString(12, request.getParameter("contact_phone"));
			statement.setString(13, request.getParameter("images"));
			statement.setInt(14, Integer.parseInt(request.getParameter("available_rooms")));
			statement.executeUpdate();
		}
	}

	private void updateHotel(Connection connection, HttpServletRequest request) throws SQLException {
		String query = "UPDATE hotels SET name=?, description=?, location=?, city=?, state=?, "
				+ "country=?, zip_code=?, price_per_night=?, rating=?, amenities=?, "
				+ "contact_email=?, contact_phone=?, images=?, available_rooms=?, "
				+ "updated_at=NOW() WHERE hotel_id=?";

		try (PreparedStatement statement = connection.prepareStatement(query)) {
			statement.setString(1, request.getParameter("name"));
			statement.setString(2, request.getParameter("description"));
			statement.setString(3, request.getParameter("location"));
			statement.setString(4, request.getParameter("city"));
			statement.setString(5, request.getParameter("state"));
			statement.setString(6, request.getParameter("country"));
			statement.setString(7, request.getParameter("zip_code"));
			statement.setBigDecimal(8, new java.math.BigDecimal(request.getParameter("price_per_night")));
			statement.setFloat(9, Float.parseFloat(request.getParameter("rating")));
			statement.setString(10, request.getParameter("amenities"));
			statement.setString(11, request.getParameter("contact_email"));
			statement.setString(12, request.getParameter("contact_phone"));
			statement.setString(13, request.getParameter("images"));
			statement.setInt(14, Integer.parseInt(request.getParameter("available_rooms")));
			statement.setInt(15, Integer.parseInt(request.getParameter("hotel_id")));
			statement.executeUpdate();
		}
	}

	private void deleteHotel(Connection connection, int hotelId) throws SQLException {
		String query = "DELETE FROM hotels WHERE hotel_id = ?";
		try (PreparedStatement statement = connection.prepareStatement(query)) {
			statement.setInt(1, hotelId);
			statement.executeUpdate();
		}
	}
}