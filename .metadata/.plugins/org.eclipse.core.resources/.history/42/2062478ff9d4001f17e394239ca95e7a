package com.hotelmate.admin.servlets;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@WebServlet("/admin/users")
public class UserManagementServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/HotelMate?useSSL=false";
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "password";

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD)) {
            String query = "SELECT * FROM users";
            PreparedStatement statement = connection.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();

            List<Map<String, Object>> users = new ArrayList<>();
            while (resultSet.next()) {
                Map<String, Object> user = new HashMap<>();
                user.put("id", resultSet.getInt("id"));
                user.put("full_name", resultSet.getString("full_name"));
                user.put("email", resultSet.getString("email"));
                user.put("created_at", resultSet.getTimestamp("created_at"));
                users.add(user);
            }
            request.setAttribute("users", users);

            // Display a success message if the data was fetched successfully
            request.setAttribute("successMsg", "User data loaded successfully.");
        } catch (Exception e) {
            e.printStackTrace();
            request.setAttribute("errorMsg", "Unable to fetch user data.");
        }
        request.getRequestDispatcher("/admin/users").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");
        try (Connection connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD)) {
            if ("delete".equalsIgnoreCase(action)) {
                int userId = Integer.parseInt(request.getParameter("id"));
                deleteUser(connection, userId);
                // Set success message to be displayed in the JSP
                request.setAttribute("successMsg", "User deleted successfully.");
            } else if ("update".equalsIgnoreCase(action)) {
                int userId = Integer.parseInt(request.getParameter("id"));
                String fullName = request.getParameter("full_name");
                String email = request.getParameter("email");
                updateUser(connection, userId, fullName, email);
                // Set success message to be displayed in the JSP
                request.setAttribute("successMsg", "User updated successfully.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Set error message to be displayed in the JSP
            request.setAttribute("errorMsg", "Error processing request.");
        }
        // Forward back to the user management page
        request.getRequestDispatcher("admin/users").forward(request, response);
    }

    private void deleteUser(Connection connection, int userId) throws Exception {
        String query = "DELETE FROM users WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, userId);
            statement.executeUpdate();
        }
    }

    private void updateUser(Connection connection, int userId, String fullName, String email) throws Exception {
        String query = "UPDATE users SET full_name = ?, email = ? WHERE id = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, fullName);
            statement.setString(2, email);
            statement.setInt(3, userId);
            statement.executeUpdate();
        }
    }
}
