/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2025-01-13 20:01:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;

public final class listing_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Listings - HotelMate</title>\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write(".card-img-top {\r\n");
      out.write("	height: 180px;\r\n");
      out.write("	object-fit: cover;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".listing-info {\r\n");
      out.write("	color: #6c757d;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".price {\r\n");
      out.write("	font-size: 1.2rem;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	color: #198754;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".filters {\r\n");
      out.write("	margin-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', function () {\r\n");
      out.write("        if (!localStorage.getItem('HasLoggedIn') || localStorage.getItem('HasLoggedIn') !== 'true') {\r\n");
      out.write("            window.location.href = \"login.jsp\"; \r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/Components/navbar.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!-- Sidebar Filters -->\r\n");
      out.write("	<div class=\"container\" style=\"margin-top: 116px; margin-bottom: 50px;\">\r\n");
      out.write("		<div class=\"row\">\r\n");
      out.write("			<div class=\"col-md-3\">\r\n");
      out.write("				<div class=\"filters\">\r\n");
      out.write("					<h4>Filter by Cities</h4>\r\n");
      out.write("					<form id=\"cityFilterForm\">\r\n");
      out.write("						");

						@SuppressWarnings("unchecked")
						List<String> cities = (List<String>) request.getAttribute("cities");
						if (cities != null) {
							for (String city : cities) {
						
      out.write("\r\n");
      out.write("						<div class=\"form-check\">\r\n");
      out.write("							<input class=\"form-check-input city-filter\" type=\"checkbox\"\r\n");
      out.write("								value=\"");
      out.print(city);
      out.write("\" id=\"city_");
      out.print(city);
      out.write("\" name=\"cities\"> <label\r\n");
      out.write("								class=\"form-check-label\" for=\"city_");
      out.print(city);
      out.write('"');
      out.write('>');
      out.print(city);
      out.write("</label>\r\n");
      out.write("						</div>\r\n");
      out.write("						");

						}
						}
						
      out.write("\r\n");
      out.write("					</form>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"filters\">\r\n");
      out.write("					<h4>Filter by Price</h4>\r\n");
      out.write("					<label for=\"priceRange\">Price Range: ₹ 500 - ₹<span\r\n");
      out.write("						id=\"priceValue\">50,000</span></label> <input type=\"range\"\r\n");
      out.write("						class=\"form-range\" min=\"500\" max=\"50000\" step=\"10\" id=\"priceRange\">\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<!-- Hotels Listing -->\r\n");
      out.write("			<div class=\"col-md-9\">\r\n");
      out.write("				<div class=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4\"\r\n");
      out.write("					id=\"hotelList\">\r\n");
      out.write("					");

					@SuppressWarnings("unchecked")
					List<Map<String, Object>> hotels = (List<Map<String, Object>>) request.getAttribute("hotels");
					if (hotels != null) {
						for (Map<String, Object> hotel : hotels) {
							String[] images = ((String) hotel.get("imageUrl")).split(",");
					
      out.write("\r\n");
      out.write("					<div class=\"col hotel-item\" data-city=\"");
      out.print(hotel.get("city"));
      out.write("\"\r\n");
      out.write("						data-price=\"");
      out.print(hotel.get("pricePerNight"));
      out.write("\">\r\n");
      out.write("						<div class=\"card shadow-sm\">\r\n");
      out.write("							<!-- Carousel for Images -->\r\n");
      out.write("							<div id=\"carousel");
      out.print(hotel.get("hotelId"));
      out.write("\"\r\n");
      out.write("								class=\"carousel slide\" data-bs-ride=\"carousel\">\r\n");
      out.write("								<div class=\"carousel-inner\">\r\n");
      out.write("									");

									for (int i = 0; i < images.length; i++) {
										String image = images[i].trim();
									
      out.write("\r\n");
      out.write("									<div class=\"carousel-item ");
      out.print((i == 0) ? "active" : "");
      out.write("\">\r\n");
      out.write("										<img src=\"");
      out.print(image);
      out.write("\" class=\"d-block w-100 card-img-top\"\r\n");
      out.write("											alt=\"");
      out.print(hotel.get("name"));
      out.write("\">\r\n");
      out.write("									</div>\r\n");
      out.write("									");

									}
									
      out.write("\r\n");
      out.write("								</div>\r\n");
      out.write("								");

								if (images.length > 1) {
								
      out.write("\r\n");
      out.write("								<button class=\"carousel-control-prev\" type=\"button\"\r\n");
      out.write("									data-bs-target=\"#carousel");
      out.print(hotel.get("hotelId"));
      out.write("\"\r\n");
      out.write("									data-bs-slide=\"prev\">\r\n");
      out.write("									<span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n");
      out.write("									<span class=\"visually-hidden\">Previous</span>\r\n");
      out.write("								</button>\r\n");
      out.write("								<button class=\"carousel-control-next\" type=\"button\"\r\n");
      out.write("									data-bs-target=\"#carousel");
      out.print(hotel.get("hotelId"));
      out.write("\"\r\n");
      out.write("									data-bs-slide=\"next\">\r\n");
      out.write("									<span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n");
      out.write("									<span class=\"visually-hidden\">Next</span>\r\n");
      out.write("								</button>\r\n");
      out.write("								");

								}
								
      out.write("\r\n");
      out.write("							</div>\r\n");
      out.write("\r\n");
      out.write("							<div class=\"card-body\">\r\n");
      out.write("								<h5 class=\"card-title\">");
      out.print(hotel.get("name"));
      out.write("</h5>\r\n");
      out.write("								<p class=\"listing-info\">\r\n");
      out.write("									<i class=\"bi bi-geo-alt-fill\"></i>\r\n");
      out.write("									");
      out.print(hotel.get("city"));
      out.write(",\r\n");
      out.write("									");
      out.print(hotel.get("state"));
      out.write(",\r\n");
      out.write("									");
      out.print(hotel.get("country"));
      out.write("\r\n");
      out.write("								</p>\r\n");
      out.write("								<p class=\"card-text\">");
      out.print(hotel.get("description"));
      out.write("</p>\r\n");
      out.write("								<div class=\"d-flex justify-content-between align-items-center\">\r\n");
      out.write("									<span class=\"price\">₹");
      out.print(hotel.get("pricePerNight"));
      out.write(" /\r\n");
      out.write("										night\r\n");
      out.write("									</span> <a href=\"HotelDetailServlet?hotelId=");
      out.print(hotel.get("hotelId"));
      out.write("\"\r\n");
      out.write("										class=\"btn btn-primary\">View Details</a>\r\n");
      out.write("								</div>\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					");

					}
					}
					
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/Components/footer.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js\"></script>\r\n");
      out.write("	<script\r\n");
      out.write("		src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js\"></script>\r\n");
      out.write("	<script>\r\n");
      out.write("    document.addEventListener('DOMContentLoaded', function () {\r\n");
      out.write("        const cityFilterForm = document.getElementById('cityFilterForm');\r\n");
      out.write("        const priceRange = document.getElementById('priceRange');\r\n");
      out.write("        const priceValue = document.getElementById('priceValue');\r\n");
      out.write("        const hotelList = document.getElementById('hotelList');\r\n");
      out.write("        \r\n");
      out.write("        priceRange.addEventListener('input', function () {\r\n");
      out.write("            priceValue.textContent = priceRange.value;\r\n");
      out.write("            filterHotels();\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        cityFilterForm.addEventListener('change', function () {\r\n");
      out.write("            filterHotels();\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        function filterHotels() {\r\n");
      out.write("            const selectedCities = Array.from(document.querySelectorAll('input[name=\"cities\"]:checked')).map(\r\n");
      out.write("                (checkbox) => checkbox.value\r\n");
      out.write("            );\r\n");
      out.write("            const maxPrice = parseInt(priceRange.value);\r\n");
      out.write("\r\n");
      out.write("            const hotels = document.querySelectorAll('.hotel-item');\r\n");
      out.write("            hotels.forEach(function (hotel) {\r\n");
      out.write("                const hotelCity = hotel.getAttribute('data-city');\r\n");
      out.write("                const hotelPrice = parseFloat(hotel.getAttribute('data-price'));\r\n");
      out.write("                const cityMatch = selectedCities.length === 0 || selectedCities.includes(hotelCity);\r\n");
      out.write("                const priceMatch = hotelPrice <= maxPrice;\r\n");
      out.write("\r\n");
      out.write("                hotel.style.display = cityMatch && priceMatch ? 'block' : 'none';\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
